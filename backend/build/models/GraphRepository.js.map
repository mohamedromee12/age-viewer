{"version":3,"file":"GraphRepository.js","names":["_Pg","_interopRequireDefault","require","_pg","_pgTypes","_AGEParser","_SQLFlavorManager","GraphRepository","_ref","arguments","length","undefined","host","port","database","graph","user","password","_ref$graphs","graphs","server","_classCallCheck2","_host","_port","_database","_server_version","_graphs","_graph","_user","_password","_createClass2","key","value","_connect","_asyncToGenerator2","_regenerator","mark","_callee","client","_yield$onConnectQueri","v","wrap","_callee$","_context","prev","next","_pool","newConnectionPool","getPoolConnectionInfo","connect","sent","onConnectQueries","server_version","abrupt","stop","apply","_execute","_callee2","query","params","result","_args2","_callee2$","_context2","getConnection","t0","release","finish","execute","_x","_createTransaction","_callee4","_callee4$","_context4","_ref2","_callee3","_args3","_callee3$","_context3","t1","_x2","createTransaction","_initGraphNames","_callee5","_yield$this$execute","rows","_callee5$","_context5","getQuery","map","item","name","setCurrentGraph","initGraphNames","_getConnection","_callee6","_callee6$","_context6","setAGETypes","types","_releaseConnection","_callee7","_callee7$","_context7","end","releaseConnection","version","max","PgConfig","idleTimeoutMillis","connectionTimeoutMillis","getConnectionInfo","Error","poolConnectionConfig","pg","Pool","module","exports"],"sources":["../../src/models/GraphRepository.js"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport PgConfig from '../config/Pg'\n\nimport pg from 'pg';\nimport types from 'pg-types';\nimport {setAGETypes, onConnectQueries} from '../tools/AGEParser';\nimport { getQuery } from '../tools/SQLFlavorManager';\n\n\nclass GraphRepository {\n    constructor({host, port, database, graph, user, password, graphs=[], server} = {}) {\n        this._host = host;\n        this._port = port;\n        this._database = database;\n        this._server_version = server;\n        this._graphs = graphs;\n        this._graph = graph;\n        this._user = user;\n        this._password = password;\n    }\n    /*\n    static async getConnection({\n                                   host,\n                                   port,\n                                   database,\n                                   user,\n                                   password,\n                               } = {},\n                               closeConnection = true) {\n        const client = new pg.Client({\n                user,\n                password,\n                host,\n                database,\n                port,\n            }\n        )\n\n        client.connect();\n        \n        await setAGETypes(client, types);\n        if (closeConnection === true) {\n            await client.end();\n        }\n        return client;\n    }\n    */\n    async connect(){\n        if (!this._pool) {\n            this._pool = GraphRepository.newConnectionPool(this.getPoolConnectionInfo());\n        }\n        const client = await this._pool.connect();\n        if (!this._server_version){\n            const {server_version: v} = await onConnectQueries(client);\n            this._server_version = v;\n        }\n\n        return client;\n    }\n\n    static newConnectionPool(poolConnectionConfig) {\n        return new pg.Pool(poolConnectionConfig);\n    }\n\n    // Execute cypher query with params\n    async execute(query, params = []) {\n        let client = await this.getConnection();\n        let result = null;\n        try {\n            result = await client.query(query, params);\n        } catch (err) {\n            throw err;\n        } finally {\n            client.release();\n        }\n        return result;\n    }\n\n    async createTransaction(){\n        const client = await this.getConnection();\n        return [client, async (query, params=[])=>{\n            return [await client.query(query, params), client];\n        }]\n    }\n\n    async initGraphNames(){\n        const { rows } = await this.execute(getQuery('get_graph_names'));\n        this._graphs = rows.map((item)=>item.name);\n        // set current graph to first name\n        this.setCurrentGraph(this._graphs[0]);\n    }\n    \n    /**\n     * Get connectionInfo\n     */\n    async getConnection() {\n\n        const client = await this._pool.connect();\n\n        await setAGETypes(client, types);\n\n        return client;\n    }\n\n    /**\n     * Release connection\n     */\n    async releaseConnection() {\n        try {\n            await this._pool.end();\n            return true;\n        } catch (err) {\n            throw err;\n        }\n    }\n\n    /**\n     * Get connection pool information\n     */\n    getPoolConnectionInfo() {\n        if (!this._host || !this._port || !this._database) {\n            return null;\n        }\n        return {\n            host: this._host,\n            port: this._port,\n            database: this._database,\n            version: this._server_version,\n            user: this._user,\n            password: this._password,\n            max: PgConfig.max,\n            idleTimeoutMillis: PgConfig.idleTimeoutMillis,\n            connectionTimeoutMillis: PgConfig.connectionTimeoutMillis,\n        };\n    }\n\n    /**\n     * Get connection info\n     */\n    getConnectionInfo() {\n        if (!this._host || !this._port || !this._database) {\n            throw new Error(\"Not connected\");\n        }\n        return {\n            host: this._host,\n            version: this._server_version,\n            port: this._port,\n            database: this._database,\n            user: this._user,\n            password: this._password,\n            graphs: this._graphs,\n            graph: this._graph,\n        };\n    }\n\n    setCurrentGraph(name){\n        this._graph = name;\n    }\n}\n\nmodule.exports = GraphRepository;\n"],"mappings":"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"}