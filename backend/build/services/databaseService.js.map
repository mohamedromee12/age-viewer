{"version":3,"file":"databaseService.js","names":["_SQLFlavorManager","require","util","_interopRequireWildcard","_GraphRepository","_interopRequireDefault","_repl","_http","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","DatabaseService","_classCallCheck2","_graphRepository","_createClass2","value","_getMetaData","_asyncToGenerator2","_regenerator","mark","_callee","graphName","gr","_gr$getConnectionInfo","graphs","wrap","_callee$","_context","prev","next","initGraphNames","getConnectionInfo","analyzeGraph","includes","currentGraph","getMetaDataSingle","abrupt","sent","_graph","length","graphNameInitialize","Error","stop","getMetaData","_x","apply","arguments","_getMetaDataSingle","_callee2","curGraph","metadata","data","_this$getConnectionIn","database","_yield$this$readMetaD","nodes","edges","_callee2$","_context2","readMetaData","getPropertyKeys","propertyKeys","graph","getRole","role","forEach","gname","t0","_x2","_x3","_graphNameInitialize","_callee3","_callee3$","_context3","_x4","_getGraphLabels","_callee4","graphRepository","queryResult","_callee4$","_context4","execute","getQuery","rows","getGraphLabels","_getGraphLabelCount","_callee5","labelName","labelKind","query","_callee5$","_context5","format","concat","getGraphLabelCount","_x5","_x6","_readMetaData","_callee6","_gr$getConnectionInfo2","version","_callee6$","_context6","split","parseMeta","_x7","_getPropertyKeys","_callee7","_callee7$","_context7","_getRole","_callee8","_callee8$","_context8","user","_connectDatabase","_callee9","connectionInfo","client","_callee9$","_context9","GraphRepository","connect","release","connectDatabase","_x8","_disconnectDatabase","_callee10","isRelease","_callee10$","_context10","console","log","releaseConnection","disconnectDatabase","_getConnectionStatus","_callee11","_callee11$","_context11","getConnection","getConnectionStatus","isConnected","convertEdge","_ref","label","id","start","end","props","oid","properties","meta","vertex_name","edge_name","element","index","name","kind","push","_analyzeGraph","_callee12","_callee12$","_context12","_x9","module","exports"],"sources":["../../src/services/databaseService.js"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { getQuery } from \"../tools/SQLFlavorManager\";\nimport * as util from \"util\";\nimport GraphRepository from '../models/GraphRepository';\nimport { start } from \"repl\";\nimport { get } from \"http\";\n\nclass DatabaseService {\n    constructor() {\n        this._graphRepository = null;\n    }\n\n    async getMetaData(graphName) {\n        let gr = this._graphRepository;\n        await gr.initGraphNames();\n        const { graphs } = gr.getConnectionInfo();\n        await DatabaseService.analyzeGraph(gr);\n        if (graphName) {\n            if (graphs.includes(graphName.currentGraph)) {\n                return await this.getMetaDataSingle(graphName.currentGraph, graphs);\n            } else {\n                return await this.getMetaDataSingle(gr._graph, graphs);\n            }\n        } else if (graphs.length > 0) {\n            return await this.graphNameInitialize(graphs);\n        } else {\n            throw new Error('graph does not exist');\n            // return await this.getMetaDataMultiple(graphs);\n        }\n    }\n\n    // async getMetaDataMultiple(graphs){\n    //     const metadata = {};\n    //     await Promise.all(graphs.map(async(gname)=>{\n    //         metadata[gname] = await this.getMetaDataSingle(gname);\n    //     }))\n    //     return metadata;\n    // }\n\n    async getMetaDataSingle(curGraph, graphs) {\n        let metadata = {};\n        let data = {};\n        const { database } = this.getConnectionInfo();\n        try {\n            let { nodes, edges } = await this.readMetaData(curGraph);\n            data.nodes = nodes;\n            data.edges = edges;\n            data.propertyKeys = await this.getPropertyKeys();\n            data.graph = curGraph;\n            data.database = database;\n            data.role = await this.getRole();\n            graphs.forEach((gname) => {\n                if (gname !== curGraph) metadata[gname] = {};\n                else metadata[gname] = data;\n            })\n        } catch (error) {\n            throw error;\n        }\n        return metadata;\n    }\n\n    async graphNameInitialize(graphs) {\n        let metadata = {};\n        graphs.forEach((gname) => {\n            metadata[gname] = {};\n        })\n        return metadata;\n    }\n\n    async getGraphLabels() {\n        let graphRepository = this._graphRepository;\n        let queryResult = {};\n        try {\n            queryResult = await graphRepository.execute(getQuery('graph_labels'), [this.getConnectionInfo().graph]);\n        } catch (error) {\n            throw error;\n        }\n\n        return queryResult.rows;\n    }\n\n    async getGraphLabelCount(labelName, labelKind) {\n        let graphRepository = this._graphRepository;\n        let query = null;\n\n        if (labelKind === 'v') {\n            query = util.format(getQuery('label_count_vertex'), `${this.getConnectionInfo().graph}.${labelName}`);\n        } else if (labelKind === 'e') {\n            query = util.format(getQuery('label_count_edge'), `${this.getConnectionInfo().graph}.${labelName}`);\n        }\n\n        let queryResult = await graphRepository.execute(query);\n\n        return queryResult.rows;\n    }\n\n    static async analyzeGraph(gr) {\n        await gr.execute(getQuery('analyze_graph'));\n    }\n\n    async readMetaData(graphName) {\n        let gr = this._graphRepository;\n        const { version } = gr.getConnectionInfo();\n        let queryResult = await gr.execute(util.format(getQuery('meta_data', version.split('.')[0]), graphName));\n        return this.parseMeta(queryResult.rows);\n    }\n\n    async getPropertyKeys() {\n        let graphRepository = this._graphRepository;\n        let queryResult = await graphRepository.execute(getQuery('property_keys'));\n        return queryResult.rows;\n    }\n\n    async getRole() {\n        let graphRepository = this._graphRepository;\n        let queryResult = await graphRepository.execute(getQuery('get_role'), [this.getConnectionInfo().user]);\n        return queryResult.rows[0];\n    }\n\n    async connectDatabase(connectionInfo) {\n        let graphRepository = this._graphRepository;\n        if (graphRepository == null) {\n            this._graphRepository = new GraphRepository(connectionInfo);\n            graphRepository = this._graphRepository;\n        }\n\n        try {\n            let client = await graphRepository.connect();\n            client.release();\n        } catch (e) {\n            this._graphRepository = null;\n            throw e;\n        }\n        return true;\n    }\n\n    async disconnectDatabase() {\n        let graphRepository = this._graphRepository;\n        if (graphRepository == null) {\n            console.log('Already Disconnected');\n            return false;\n        } else {\n            let isRelease = await this._graphRepository.releaseConnection();\n            if (isRelease) {\n                this._graphRepository = null;\n                return true;\n            } else {\n                console.log('Failed releaseConnection()');\n                return false;\n            }\n        }\n    }\n\n    async getConnectionStatus() {\n        let graphRepository = this._graphRepository;\n        if (graphRepository == null) {\n            return false;\n        }\n\n        try {\n            let client = await graphRepository.getConnection();\n            client.release();\n        } catch (err) {\n            return false;\n        }\n        return true;\n    }\n\n    getConnectionInfo() {\n        if (this.isConnected() === false)\n            throw new Error(\"Not connected\");\n        return this._graphRepository.getConnectionInfo();\n    }\n\n    isConnected() {\n        return this._graphRepository != null;\n    }\n\n    get graphRepository() {\n        return this._graphRepository;\n    }\n\n    convertEdge({ label, id, start, end, props }) {\n        return {\n            label: label,\n            id: `${id.oid}.${id.id}`,\n            start: `${start.oid}.${start.id}`,\n            end: `${end.oid}.${end.id}`,\n            properties: props,\n        };\n    }\n    parseMeta(data) {\n        const meta = {\n            edges: [],\n            nodes: []\n        };\n        const vertex_name = '_ag_label_vertex';\n        const edge_name = '_ag_label_edge';\n\n        data.forEach((element, index) => {\n            if (element.name === vertex_name || element.name === edge_name) {\n                return;\n            }\n\n            if (element.kind === 'v') meta.nodes.push(element);\n            if (element.kind === 'e') meta.edges.push(element);\n        });\n        return meta;\n    }\n}\n\nmodule.exports = DatabaseService;"],"mappings":"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"}